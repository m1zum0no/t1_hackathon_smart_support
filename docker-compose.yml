version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: smart-support-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5442:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - smart-support-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: smart-support-redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - smart-support-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./fastapi-chat
      dockerfile: Dockerfile
    container_name: smart-support-backend
    env_file:
      - ./fastapi-chat/src/.env
    environment:
      - ENVIRONMENT=development
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8001:8001"
    volumes:
      - ./fastapi-chat:/opt/chat
      - faiss_data:/opt/chat/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smart-support-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Vue.js Frontend (Development)
  frontend:
    build:
      context: ./vuetify-chat
      dockerfile: Dockerfile.dev
    container_name: smart-support-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./vuetify-chat:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:8001
      - VITE_WEBSOCKET_URL=ws://localhost:8001/ws/
    depends_on:
      - backend
    networks:
      - smart-support-net
    stdin_open: true
    tty: true

  # PgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4
    container_name: smart-support-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "7070:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - smart-support-net
    depends_on:
      - db

networks:
  smart-support-net:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
  faiss_data:

version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: smart-support-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - smart-support-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: smart-support-redis-prod
    restart: always
    networks:
      - smart-support-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./fastapi-chat
      dockerfile: Dockerfile
    container_name: smart-support-backend-prod
    restart: always
    env_file:
      - ./fastapi-chat/src/.env
    environment:
      - ENVIRONMENT=production
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - faiss_data:/opt/chat/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smart-support-net
    command: >
      sh -c "
      echo 'Running database migrations...';
      alembic upgrade head;
      if [ ! -f /opt/chat/data/faiss_index_bge_m3.bin ]; then
        echo 'Initializing FAISS index...';
        python scripts/init_faiss_index.py || echo 'Warning: FAISS index initialization failed.';
      fi;
      echo 'Starting production server...';
      gunicorn src.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8001
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Vue.js Frontend (Production with Nginx)
  frontend:
    build:
      context: ./vuetify-chat
      dockerfile: Dockerfile
    container_name: smart-support-frontend-prod
    restart: always
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - smart-support-net

networks:
  smart-support-net:
    driver: bridge

volumes:
  postgres_data:
  faiss_data:
